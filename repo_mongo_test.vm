/*
* Java bean class
* Created on $today.date ( Date ISO $today.date("yyyy-MM-dd") - Time $today.time )
* Generated by $generator.name ( version $generator.version )
*/

package ${target.javaPackageFromFolder(${TEST_SRC})};

#foreach( $import in $java.imports($entity.attributes) )
import $import;
#end

import com.mongodb.*;
import cz.jirutka.spring.embedmongo.EmbeddedMongoBuilder;
import ${ROOT_PKG}.ApplicationConfigTest;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.test.SpringApplicationConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.beans.factory.annotation.Autowired;
import ${ENTITY_PKG}.${entity.name};

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * Repository
 *
 * @author Telosys Tools Generator
 *
 */
@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = ApplicationConfigTest.class)
public class ${entity.name}RepositoryTest
{

    /**
     * Spring Data Repository
     */
    @Autowired
    ${entity.name}Repository ${fn.uncapitalize($entity.name)}Repository;

    /**
     * MongoDB Java client
     */
    @Autowired
    Mongo mongo;

    /**
     * Initialize MongoDB with Java client
     */
    @Before
    public void setUp() throws Exception {

        // Drop database
        mongo.dropDatabase("test");

        // Create database
        DB db = mongo.getDB("test");

        // Documents collection
        DBCollection collection = db.getCollection("${fn.uncapitalize($entity.name)}s");
    }

    /**
     * Spring Data : Create and search ${entity.name} in MongoDB
     */
    @Test
    public void test() {
    
        ${entity.name} ${fn.uncapitalize($entity.name)} = new ${entity.name}();
#foreach($field in ${entity.attributes})
#set ( $type = $fn.uncapitalize($field.type) )
#if ( $type == "integer" )
        ${fn.uncapitalize($entity.name)}.${field.setter}(1);
#end
#if ( $type == "string" )
        ${fn.uncapitalize($entity.name)}.${field.setter}("Test");
#end
#end
        ${fn.uncapitalize($entity.name)}Repository.save(${fn.uncapitalize($entity.name)});
        
        Iterable<${entity.name}> ${fn.uncapitalize($entity.name)}s = ${fn.uncapitalize($entity.name)}Repository.findAll();
    
        System.out.println("${entity.name}s :");
        for(${entity.name} ${fn.uncapitalize($entity.name)}2 : ${fn.uncapitalize($entity.name)}s) {
            System.out.println(${fn.uncapitalize($entity.name)}2);
        }

    }

    /**
     * Clean MongoDB with Java client
     */
    @After
    public void after() {

        // Create database
        DB db = mongo.getDB("test");
    
        // Documents collection
        DBCollection collection = db.getCollection("${fn.uncapitalize($entity.name)}s");
    
        // Results
        System.out.println("\nResult:");
        DBCursor cursor = collection.find();
        if(cursor.count() == 0) {
            System.out.println("<vide>");
        } else {
            while(cursor.hasNext()) {
                System.out.println(cursor.next());
            }
        }
        cursor.close();

        // Drop database
        mongo.dropDatabase("test");

    }

}
